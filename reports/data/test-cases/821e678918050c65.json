{"uid":"821e678918050c65","name":"test_search_and_add","fullName":"TestWebUI.test_WebUI.Test_Orange_HRM#test_search_and_add","historyId":"2b8cc36e3cf6fa5467e8c4c7f1671282","time":{"start":1750175878592,"stop":1750175878592,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6389efea5+79173]\n\tGetHandleVerifier [0x0x7ff6389eff00+79264]\n\t(No symbol) [0x0x7ff6387a9e5a]\n\t(No symbol) [0x0x7ff638796630]\n\t(No symbol) [0x0x7ff638794d50]\n\t(No symbol) [0x0x7ff6387955ff]\n\t(No symbol) [0x0x7ff6387c0cdb]\n\t(No symbol) [0x0x7ff6387b4330]\n\t(No symbol) [0x0x7ff6387b41d2]\n\t(No symbol) [0x0x7ff638785d7a]\n\t(No symbol) [0x0x7ff638783d23]\n\t(No symbol) [0x0x7ff6388692b1]\n\t(No symbol) [0x0x7ff63882896a]\n\t(No symbol) [0x0x7ff63885100d]\n\t(No symbol) [0x0x7ff638828743]\n\t(No symbol) [0x0x7ff6387f14c1]\n\t(No symbol) [0x0x7ff6387f2253]\n\tGetHandleVerifier [0x0x7ff638cba2dd+3004797]\n\tGetHandleVerifier [0x0x7ff638cb472d+2981325]\n\tGetHandleVerifier [0x0x7ff638cd3380+3107360]\n\tGetHandleVerifier [0x0x7ff638a0aa2e+188622]\n\tGetHandleVerifier [0x0x7ff638a122bf+219487]\n\tGetHandleVerifier [0x0x7ff6389f8df4+115860]\n\tGetHandleVerifier [0x0x7ff6389f8fa9+116297]\n\tGetHandleVerifier [0x0x7ff6389df558+11256]\n\tBaseThreadInitThunk [0x0x7ffe3f207034+20]\n\tRtlUserThreadStart [0x0x7ffe3faa26a1+33]","statusTrace":"cls = <class 'TestWebUI.test_WebUI.Test_Orange_HRM'>\n\n    @classmethod\n    def setUpClass(cls):\n        cls.driver = webdriver.Chrome()\n>       cls.driver.maximize_window()\n\nTestWebUI\\test_WebUI.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nLib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:638: in maximize_window\n    self.execute(command, None)\nLib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000145288BA270>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...ff6389df558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe3f207034+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe3faa26a1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6389efea5+79173]\nE       \tGetHandleVerifier [0x0x7ff6389eff00+79264]\nE       \t(No symbol) [0x0x7ff6387a9e5a]\nE       \t(No symbol) [0x0x7ff638796630]\nE       \t(No symbol) [0x0x7ff638794d50]\nE       \t(No symbol) [0x0x7ff6387955ff]\nE       \t(No symbol) [0x0x7ff6387c0cdb]\nE       \t(No symbol) [0x0x7ff6387b4330]\nE       \t(No symbol) [0x0x7ff6387b41d2]\nE       \t(No symbol) [0x0x7ff638785d7a]\nE       \t(No symbol) [0x0x7ff638783d23]\nE       \t(No symbol) [0x0x7ff6388692b1]\nE       \t(No symbol) [0x0x7ff63882896a]\nE       \t(No symbol) [0x0x7ff63885100d]\nE       \t(No symbol) [0x0x7ff638828743]\nE       \t(No symbol) [0x0x7ff6387f14c1]\nE       \t(No symbol) [0x0x7ff6387f2253]\nE       \tGetHandleVerifier [0x0x7ff638cba2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff638cb472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff638cd3380+3107360]\nE       \tGetHandleVerifier [0x0x7ff638a0aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff638a122bf+219487]\nE       \tGetHandleVerifier [0x0x7ff6389f8df4+115860]\nE       \tGetHandleVerifier [0x0x7ff6389f8fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff6389df558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffe3f207034+20]\nE       \tRtlUserThreadStart [0x0x7ffe3faa26a1+33]\n\nLib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_Test_Orange_HRM","time":{"start":1750175878593,"stop":1750175883080,"duration":4487},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6389efea5+79173]\n\tGetHandleVerifier [0x0x7ff6389eff00+79264]\n\t(No symbol) [0x0x7ff6387a9e5a]\n\t(No symbol) [0x0x7ff638796630]\n\t(No symbol) [0x0x7ff638794d50]\n\t(No symbol) [0x0x7ff6387955ff]\n\t(No symbol) [0x0x7ff6387c0cdb]\n\t(No symbol) [0x0x7ff6387b4330]\n\t(No symbol) [0x0x7ff6387b41d2]\n\t(No symbol) [0x0x7ff638785d7a]\n\t(No symbol) [0x0x7ff638783d23]\n\t(No symbol) [0x0x7ff6388692b1]\n\t(No symbol) [0x0x7ff63882896a]\n\t(No symbol) [0x0x7ff63885100d]\n\t(No symbol) [0x0x7ff638828743]\n\t(No symbol) [0x0x7ff6387f14c1]\n\t(No symbol) [0x0x7ff6387f2253]\n\tGetHandleVerifier [0x0x7ff638cba2dd+3004797]\n\tGetHandleVerifier [0x0x7ff638cb472d+2981325]\n\tGetHandleVerifier [0x0x7ff638cd3380+3107360]\n\tGetHandleVerifier [0x0x7ff638a0aa2e+188622]\n\tGetHandleVerifier [0x0x7ff638a122bf+219487]\n\tGetHandleVerifier [0x0x7ff6389f8df4+115860]\n\tGetHandleVerifier [0x0x7ff6389f8fa9+116297]\n\tGetHandleVerifier [0x0x7ff6389df558+11256]\n\tBaseThreadInitThunk [0x0x7ffe3f207034+20]\n\tRtlUserThreadStart [0x0x7ffe3faa26a1+33]\n\n","statusTrace":"  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\pluggy\\_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\pluggy\\_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\pluggy\\_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\_pytest\\fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\_pytest\\unittest.py\", line 145, in unittest_setup_class_fixture\n    setup()\n    ~~~~~^^\n  File \"D:\\test\\Python_test\\py_test_4\\TestWebUI\\test_WebUI.py\", line 15, in setUpClass\n    cls.driver.maximize_window()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 638, in maximize_window\n    self.execute(command, None)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 447, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"D:\\test\\Python_test\\py_test_4\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"TestWebUI"},{"name":"suite","value":"test_WebUI"},{"name":"subSuite","value":"Test_Orange_HRM"},{"name":"host","value":"USER-20230322LN"},{"name":"thread","value":"16928-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestWebUI.test_WebUI"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"821e678918050c65.json","parameterValues":[]}